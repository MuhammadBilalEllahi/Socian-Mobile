import 'package:flutter/material.dart';
import 'package:beyondtheclass/core/utils/constants.dart';
import 'package:beyondtheclass/shared/services/api_client.dart';
import 'package:url_launcher/url_launcher.dart';

class PastPapers extends StatefulWidget {
  const PastPapers({super.key});

  @override
  _PastPapersState createState() => _PastPapersState();
}

class _PastPapersState extends State<PastPapers> {
  late Future<Map<String, dynamic>> pastPapers = Future.value({});
  final ApiClient apiClient = ApiClient();
  late String id;
  String subjectName = '';
  String selectedYear = '';

  @override
  void initState() {
    super.initState();
  }

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    final routeArgs = ModalRoute.of(context)?.settings.arguments as Map<String, dynamic>?;
    if (routeArgs?.containsKey('_id') ?? false) {
      id = routeArgs!['_id'];
      fetchPastPapers(id);
    } else {
      setState(() {
        pastPapers = Future.error('Invalid route arguments or missing ID');
      });
    }
  }

  void fetchPastPapers(String id) async {
    final String endpoint = "${ApiConstants.subjectPastpapers}/$id";
    try {
      final response = await apiClient.get(endpoint);
      setState(() {
        subjectName = response?['subjectName'] ?? '';
        pastPapers = Future.value(response ?? {});
      });
    } catch (e) {
      setState(() {
        pastPapers = Future.error('Failed to load past papers: $e');
      });
    }
  }

  Future<void> _launchPDF(String? pdfUrl) async {
    if (pdfUrl == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('No PDF link available'),
          backgroundColor: Colors.red,
        ),
      );
      return;
    }

    try {
      final downloadUrl = "${ApiConstants.pdfBaseURl}$pdfUrl";
      final Uri url = Uri.parse(downloadUrl);
      if (!await launchUrl(url, mode: LaunchMode.platformDefault)) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Could not launch $downloadUrl'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Error opening PDF: $e'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFF1A1A1A),
      appBar: AppBar(
        title: Text(
          subjectName.isEmpty ? 'Past Papers' : subjectName,
          style: const TextStyle(
            color: Colors.white,
            fontWeight: FontWeight.w600,
            fontSize: 20,
          ),
        ),
        backgroundColor: const Color(0xFF2D2D2D),
        elevation: 0,
      ),
      body: FutureBuilder<Map<String, dynamic>>(
        future: pastPapers,
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return const Center(
              child: CircularProgressIndicator(
                valueColor: AlwaysStoppedAnimation<Color>(Colors.blue),
              ),
            );
          } else if (snapshot.hasError) {
            return Center(
              child: Padding(
                padding: const EdgeInsets.all(20),
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    const Icon(Icons.error_outline, color: Colors.redAccent, size: 70),
                    const SizedBox(height: 20),
                    Text(
                      'Oops! Something went wrong',
                      style: Theme.of(context).textTheme.titleLarge?.copyWith(
                        color: Colors.white,
                      ),
                    ),
                    const SizedBox(height: 10),
                    Text(
                      '${snapshot.error}',
                      textAlign: TextAlign.center,
                      style: TextStyle(
                        color: Colors.grey[400],
                        fontSize: 16,
                      ),
                    ),
                    const SizedBox(height: 20),
                    ElevatedButton(
                      onPressed: () {
                        fetchPastPapers(id);
                      },
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.blue,
                        padding: const EdgeInsets.symmetric(horizontal: 30, vertical: 15),
                      ),
                      child: const Text('Try Again'),
                    ),
                  ],
                ),
              ),
            );
          } else if (!snapshot.hasData || snapshot.data!.isEmpty) {
            return Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Icon(Icons.folder_open, color: Colors.grey[700], size: 100),
                  const SizedBox(height: 20),
                  Text(
                    'No Past Papers Available Yet',
                    style: TextStyle(
                      color: Colors.grey[300],
                      fontSize: 20,
                      fontWeight: FontWeight.w500,
                    ),
                  ),
                  const SizedBox(height: 10),
                  Text(
                    'Check back later for updates',
                    style: TextStyle(
                      color: Colors.grey[500],
                      fontSize: 16,
                    ),
                  ),
                ],
              ),
            );
          }

          final papers = snapshot.data!['papers'] as List;
          return Column(
            children: [
              Container(
                padding: const EdgeInsets.all(16),
                child: SingleChildScrollView(
                  scrollDirection: Axis.horizontal,
                  child: Row(
                    children: papers.map((paper) {
                      final year = paper['academicYear'].toString();
                      return Padding(
                        padding: const EdgeInsets.only(right: 10),
                        child: ChoiceChip(
                          label: Text(year),
                          selected: selectedYear == year,
                          onSelected: (bool selected) {
                            setState(() {
                              selectedYear = selected ? year : '';
                            });
                          },
                          backgroundColor: const Color(0xFF2D2D2D),
                          selectedColor: Colors.blue,
                          labelStyle: TextStyle(
                            color: selectedYear == year ? Colors.white : Colors.grey[300],
                          ),
                        ),
                      );
                    }).toList(),
                  ),
                ),
              ),
              Expanded(
                child: ListView.builder(
                  padding: const EdgeInsets.symmetric(horizontal: 16),
                  itemCount: papers.length,
                  itemBuilder: (context, index) {
                    final paper = papers[index];
                    if (selectedYear.isNotEmpty && paper['academicYear'].toString() != selectedYear) {
                      return const SizedBox.shrink();
                    }
                    
                    return Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        if (index == 0 || selectedYear.isEmpty) ...[
                          Padding(
                            padding: const EdgeInsets.symmetric(vertical: 16),
                            child: Text(
                              'Academic Year ${paper['academicYear']}',
                              style: const TextStyle(
                                color: Colors.white,
                                fontSize: 18,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                          ),
                        ],
                        if (paper['papers'] != null)
                          ...(paper['papers'] as List).map((paperItem) {
                            String paperTitle = '${paperItem['type']}';
                            if (paperItem['category'] != null) {
                              paperTitle += ' (${paperItem['category']})';
                            }
                            if (paperItem['term'] != null) {
                              paperTitle += ' - ${paperItem['term']}';
                            }
                            if (paperItem['sessionType'] != null) {
                              paperTitle += ' - Session ${paperItem['sessionType']}';
                            }

                            return Card(
                              color: const Color(0xFF2D2D2D),
                              margin: const EdgeInsets.only(bottom: 12),
                              elevation: 2,
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(12),
                              ),
                              child: InkWell(
                                onTap: () => _launchPDF(paperItem['pdfUrl']),
                                borderRadius: BorderRadius.circular(12),
                                child: Padding(
                                  padding: const EdgeInsets.all(16),
                                  child: Column(
                                    crossAxisAlignment: CrossAxisAlignment.start,
                                    children: [
                                      Row(
                                        children: [
                                          Container(
                                            padding: const EdgeInsets.all(10),
                                            decoration: BoxDecoration(
                                              color: Colors.blue.withOpacity(0.1),
                                              borderRadius: BorderRadius.circular(10),
                                            ),
                                            child: const Icon(
                                              Icons.description,
                                              color: Colors.blue,
                                              size: 24,
                                            ),
                                          ),
                                          const SizedBox(width: 16),
                                          Expanded(
                                            child: Text(
                                              paperTitle,
                                              style: const TextStyle(
                                                color: Colors.white,
                                                fontSize: 16,
                                                fontWeight: FontWeight.w500,
                                              ),
                                            ),
                                          ),
                                        ],
                                      ),
                                      if (paperItem['teachers'] != null && paperItem['teachers'].isNotEmpty) ...[
                                        const SizedBox(height: 12),
                                        Row(
                                          children: [
                                            const Icon(Icons.person_outline, color: Colors.grey, size: 16),
                                            const SizedBox(width: 8),
                                            Text(
                                              paperItem['teachers'][0]['name'],
                                              style: TextStyle(
                                                color: Colors.grey[400],
                                                fontSize: 14,
                                              ),
                                            ),
                                          ],
                                        ),
                                      ],
                                      if (paperItem['metadata'] != null) ...[
                                        const SizedBox(height: 8),
                                        Row(
                                          children: [
                                            Icon(Icons.remove_red_eye_outlined, color: Colors.grey[400], size: 16),
                                            const SizedBox(width: 4),
                                            Text(
                                              '${paperItem['metadata']['views']}',
                                              style: TextStyle(color: Colors.grey[400], fontSize: 14),
                                            ),
                                            const SizedBox(width: 16),
                                            Icon(Icons.download_outlined, color: Colors.grey[400], size: 16),
                                            const SizedBox(width: 4),
                                            Text(
                                              '${paperItem['metadata']['downloads']}',
                                              style: TextStyle(color: Colors.grey[400], fontSize: 14),
                                            ),
                                          ],
                                        ),
                                      ],
                                    ],
                                  ),
                                ),
                              ),
                            );
                          }).toList(),
                      ],
                    );
                  },
                ),
              ),
            ],
          );
        },
      ),
    );
  }
}





import 'package:flutter/material.dart';
import 'package:flutter/services.dart';

class AnswersPage extends StatelessWidget {
  const AnswersPage({Key? key}) : super(key: key);

  static const String _solutionCode = '''
def twoSum(nums, target):
    """
    Find two indices such that nums[i] + nums[j] == target.
    """
    lookup = {}
    for i, num in enumerate(nums):
        complement = target - num
        if complement in lookup:
            return [lookup[complement], i]
        lookup[num] = i
''';

  @override
  Widget build(BuildContext context) {
    final codeLines = _solutionCode.trim().split('\n');
    return Scaffold(
      appBar: AppBar(
        title: const Text('Solution'),
        backgroundColor: Colors.black87,
        actions: [
          IconButton(
            icon: const Icon(Icons.copy, size: 20),
            tooltip: 'Copy Code',
            onPressed: () {
              Clipboard.setData(const ClipboardData(text: _solutionCode));
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(content: Text('Code copied to clipboard')),
              );
            },
          ),
        ],
      ),
      backgroundColor: Colors.grey[900],
      body: SafeArea(
        child: Padding(
          padding: const EdgeInsets.all(12),
          child: Container(
            decoration: BoxDecoration(
              color: const Color(0xFF1E1E1E),
              borderRadius: BorderRadius.circular(8),
            ),
            child: SingleChildScrollView(
              scrollDirection: Axis.horizontal,
              child: SingleChildScrollView(
                padding: const EdgeInsets.all(16),
                child: Row(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    // Line numbers
                    Column(
                      crossAxisAlignment: CrossAxisAlignment.end,
                      children: List.generate(
                        codeLines.length,
                        (i) => Text(
                          '${i + 1}'.padLeft(2),
                          style: TextStyle(
                            color: Colors.grey[600],
                            fontFamily: 'monospace',
                            fontSize: 14,
                          ),
                        ),
                      ),
                    ),
                    const SizedBox(width: 16),
                    // Code lines
                    Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: codeLines
                          .map(
                            (line) => Text(
                              line.replaceAll('\t', '    '),
                              style: const TextStyle(
                                color: Colors.white,
                                fontFamily: 'monospace',
                                fontSize: 14,
                              ),
                            ),
                          )
                          .toList(),
                    ),
                  ],
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }
}
